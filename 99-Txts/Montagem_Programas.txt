Montagem de programas ADVPL

0-Convenção 
	Identação User ....Function ....variaveis para dentro
	
	User Function
	.	Local 
	.	Private
	.	
	.	For 
	.	Next
	.	.	
	.	.
	.	While
	.	.
	.	.
	.	End	
	Return	
	
	
1-Cabeçalho User Function (Fica colado <---)

	#Include "Rwmake.ch"
	#Include "Colors.ch"
	#Include "Topconn.ch"
	#Include "Protheus.ch"  
	#include "Totvs.ch"
	
	//-------------------------------------------------------------------
	/*/{Protheus.doc} zNomeUserFunction.
	Descrição do objetivo da Função 
	@Author   Davidson Carvalho
	@Since 	   99/99/9999
	@Version 	12.1.25
	@param   	n/t
	@return  	n/t
	@obs.......  
	o	Especifico nome da empresa/cliente.
	
	u_zNomeUserFunction() 		//Chamar no executor.
	
	xxx......
	/*/
	//--------------------------------------------------------------------
	

	/ Comentário unitário.

	//-----------------------------------------------------------------------------------
	// comentario de bloco.
	//-----------------------------------------------------------------------------------
	
2-Cabeçalho Static Function Fica colado <---)

	//-------------------------------------------------------------------
	/*/{Protheus.doc} zNomeStaticFunction.
	Descrição do objetivo da Static Function
	@Author   Davidson Carvalho
	@Since 	   99/99/9999
	@Version 	12.1.25
	@param   	n/t
	@return  	Retorno da Static Function
	xxxxx
	/*/
	//-----------------------------------------------------------------------------------------------------------
	Static Function zNomeStaticFunction()
	.	espaço entre a função e a primeira variavel
	.	Local
	.	Private
	.
	.
	Return



3-Inicio de programa

	User Function MFAT0008()
			
		Local aSaveArea		:= GetArea()				
		Local _nOpc			:=  0
		Local _cTabela		:= ""


		Private oProcess

		_nOpc := Aviso("A T U A L I Z A  - M A R G E M - C O N T R I B U I C A O ",;
		+Chr(13)+Chr(10)+Chr(13)+Chr(10);
		+Chr(13)+Chr(10)+Chr(13)+Chr(10)+;
		"Escolha a opção para realizar a importação das tabelas de inventário!!!",{"Criar Tab","Import Invent"},2)

		If _nOpc == 1
			
			//CHKFILE('TABELA')     
		// 	dbSelectArea(_cTabela)
		//	dbSetOrder(1)
		//	MsgBox("Tabela->>> 	"+_cTabela+"	<<<--- criada com sucesso!!","Mensagem","Info")
		ElseIf _nOpc == 2   
			 
			oProcess := MsNewProcess():New( { || fProcessa() } ,"Atualizando registros...", "Analisando registros..." , .F. )
			oProcess:Activate() 
			MsgBox("Dados atualizados com sucesso,Favor verificar!!","Mensagem","Info")	                  
		EndIf 
		
		RestArea(aSaveArea)
	Return 
	
	
	
4-Exemplo de busca dados

	//-----------------------------------------------------------------------------------
	// Executa a query para buscar os registros dentre os itens do documento de saida.
	//-----------------------------------------------------------------------------------
	Local _cQuery := ""

	_cQuery := " SELECT MAX(DA1_ITEM) AS ITEM "
	_cQuery += " FROM " + RetSqlName("DA1")
	_cQuery += " WHERE  D_E_L_E_T_ = ' '"

	TcQuery _cQuery New Alias "TRB"
	dbSelectArea("TRB")



5-Exemplo de adição em array e estrutura de repetição

	//-----------------------------------------------------------------------------------
	// Realiza a repetição com while.
	//-----------------------------------------------------------------------------------
	dbSelectArea("SA1")
	SA1->(dbGotop())
	While ! SA1->(Eof())

		If SA1->A1_VEND == cVendDe  

		Aadd(aClientes,{SA1->A1_COD,SA1->A1_LOJA,cVendAte})
		nCont++
		EndIf	
	dbSelectArea("SA1")
	SA1->(dbSkip())
	End 	
	
	//-----------------------------------------------------------------------------------
	// Alimenta o Array com o resultado da query SD2
	//-----------------------------------------------------------------------------------
	Aadd(_aDados,{_cFFilial,_cDoc,_cSerie,_cCliente,_cLoja,_cCod,_cItem,_cCusto,_nCusto,_dData1}) 
	  


6-Exemplo de gravação em tabela com Reck Lock e Update

	//-----------------------------------------------------------------------------------
	// Realiza a gravação na SD2 conforme solicitado.
	//-----------------------------------------------------------------------------------
	dbSelectArea("SA1")
	SA1->(dbSetOrder(1))
	If dbSeek(xFilial("SA1")+aClientes[nXt][1]+aClientes[nXt][2])
		
		If RecLock("SA1",.F.)
			
			Replace A1_VEND 	With aClientes[nXt][3]
			Replace A1_ZVEND1 	With cVendDe	 	//Vendedor anterior 
			Replace A1_ZDESVE 	With cNomeVendAnt 	//Nome do vendedor anterior 
			Replace A1_DTTRANS 	With dDataIn 		//Data da transferência.
			Replace A1_HRTRAN 	With cHoraFi 		//Hora da transferência.
			MsUnlock()
		EndIf
	EndIf
	
			
	//-----------------------------------------------------------------------------------
	// Gravação com update.
	//-----------------------------------------------------------------------------------	
		
	For _nXi := 1 To Len(_aDados)

		dbSelectArea("SD2")
		dbSetOrder(3) //D2_FILIAL+D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA+D2_COD+D2_ITEM                                                    
		If dbSeek(Padr(_aDados[_nXi][1],4)+Padr(_aDados[_nXi][2],9)+Padr(_aDados[_nXi][3],3)+Padr(_aDados[_nXi][4],8)+Padr(_aDados[_nXi][5],4)+Padr(_aDados[_nXi][6],15)+Padr(_aDados[_nXi][7],2))
			
			cQueryQuery = " UPDATE D2 " 
			cQuery += " SET D2.D2_CUSTO1 = '"+Alltrim(Str(_aDados[_nXi][9]))+"'"
			cQuery += " ,D2.D2_CCUSTO = '"+_aDados[_nXi][8]+"'"
			cQuery += " FROM SD2010 D2	" 
			cQuery += " WHERE D2.D2_DOC = '"+_aDados[_nXi][2]+"'"
			cQuery += " AND D2.D2_SERIE = '"+_aDados[_nXi][3]+"'"  
			cQuery += " AND D2.D2_CLIENTE = '"+_aDados[_nXi][4]+"'"                  
			cQuery += " AND D2.D2_LOJA = '"+_aDados[_nXi][5]+"'"  
			cQuery += " AND D2.D2_COD = '"+_aDados[_nXi][6]+"'"  
			cQuery += " AND D2.D2_ITEM = '"+_aDados[_nXi][7]+"'"   
			cQuery += " AND D2.D2_EMISSAO  = '"+Dtos(_aDados[_nXi][10])+"'" 
			cQuery += " AND D2.D_E_L_E_T_<>'*' "
			TcSqlExec(cQuery) 

		EndIf
		
	Next _nXi 	

	//-----------------------------------------------------------------------------------
	// Criação de tela 
	//-----------------------------------------------------------------------------------


	//-----------------------------------------------------------------------------------
	// verifica se a linha não esta deletada
	//-----------------------------------------------------------------------------------
     If !aCols[nI][Len(aHeader)+1]
          _nTotalPV := _nTotalPV + aCols[nI][_nTotalPV]     
     EndIf
	 
	 
	 
		
	 
